{"version":3,"file":"wretch.js","sources":["../../src/mix.ts","../../src/config.ts","../../src/resolver.ts","../../src/wretcher.ts","../../src/index.ts"],"sourcesContent":["export const mix = function(one: object, two: object, mergeArrays: boolean = false) {\n    if(!one || !two || typeof one !== \"object\" || typeof two !== \"object\")\n        return one\n\n    const clone = { ...one }\n    for(const prop in two) {\n        if(two.hasOwnProperty(prop)) {\n            if(two[prop] instanceof Array && one[prop] instanceof Array) {\n                clone[prop] = mergeArrays ? [ ...one[prop], ...two[prop] ] : two[prop]\n            } else if(typeof two[prop] === \"object\" && typeof one[prop] === \"object\") {\n                clone[prop] = mix(one[prop], two[prop], mergeArrays)\n            } else {\n                clone[prop] = two[prop]\n            }\n        }\n    }\n\n    return clone\n}\n","export default {\n    // Default options\n    defaults: {},\n    // Error type\n    errorType: null\n}\n","import { mix } from \"./mix\"\nimport conf from \"./config\"\n\nexport type WretcherError = Error & { status: number, response: Response, text?: string, json?: any }\n\nexport const resolver = url => (catchers: Map<number, (error: WretcherError) => void> = new Map()) => (opts = {}) => {\n    const req = fetch(url, mix(conf.defaults, opts))\n    const wrapper: Promise<void | Response> = req.then(response => {\n        if (!response.ok) {\n            return response[conf.errorType || \"text\"]().then(_ => {\n                const err = new Error(_)\n                err[conf.errorType] = _\n                err[\"status\"] = response.status\n                err[\"response\"] = response\n                throw err\n            })\n        }\n        return response\n    })\n\n    type TypeParser = <Type>(funName: string | null) => <Result = void>(cb?: (type: Type) => Result) => Promise<Result>\n\n    const doCatch = <T>(promise: Promise<T>): Promise<void | T> => {\n        return promise.catch(err => {\n            if(catchers.has(err.status))\n                catchers.get(err.status)(err)\n            else\n                throw err\n        })\n    }\n    const wrapTypeParser: TypeParser = <T>(funName) => <R>(cb) => funName ?\n        doCatch(wrapper.then(_ => _ && _[funName]()).then(_ => _ && cb && cb(_) || _)) :\n        doCatch(wrapper.then(_ => _ && cb && cb(_) || _))\n\n    const responseTypes: {\n        res: <Result = Response>(cb?: (type: void) => Result) => Promise<Result>,\n        json: <Result = {[key: string]: any}>(cb?: (type: {[key: string]: any}) => Result) => Promise<Result>,\n        blob: <Result = Blob>(cb?: (type: Blob) => Result) => Promise<Result>,\n        formData: <Result = FormData>(cb?: (type: FormData) => Result) => Promise<Result>,\n        arrayBuffer: <Result = ArrayBuffer>(cb?: (type: ArrayBuffer) => Result) => Promise<Result>,\n        text: <Result = string>(cb?: (type: string) => Result) => Promise<Result>,\n        error: (code: number, cb: any) => typeof responseTypes,\n        badRequest: (cb: (error: WretcherError) => void) => typeof responseTypes,\n        unauthorized: (cb: (error: WretcherError) => void) => typeof responseTypes,\n        forbidden: (cb: (error: WretcherError) => void) => typeof responseTypes,\n        notFound: (cb: (error: WretcherError) => void) => typeof responseTypes,\n        timeout: (cb: (error: WretcherError) => void) => typeof responseTypes,\n        internalError: (cb: (error: WretcherError) => void) => typeof responseTypes\n    } = {\n        /**\n         * Retrieves the raw result as a promise.\n         */\n        res: wrapTypeParser<void>(null),\n        /**\n         * Retrieves the result as a parsed JSON object.\n         */\n        json: wrapTypeParser<any>(\"json\"),\n        /**\n         * Retrieves the result as a Blob object.\n         */\n        blob: wrapTypeParser<Blob>(\"blob\"),\n        /**\n         * Retrieves the result as a FormData object.\n         */\n        formData: wrapTypeParser<FormData>(\"formData\"),\n        /**\n         * Retrieves the result as an ArrayBuffer object.\n         */\n        arrayBuffer: wrapTypeParser<ArrayBuffer>(\"arrayBuffer\"),\n        /**\n         * Retrieves the result as a string.\n         */\n        text: wrapTypeParser<string>(\"text\"),\n        /**\n         * Catches an http response with a specific error code and performs a callback.\n         */\n        error(code: number, cb) {\n            catchers.set(code, cb)\n            return responseTypes\n        },\n        /**\n         * Catches a bad request (http code 400) and performs a callback.\n         */\n        badRequest: cb => responseTypes.error(400, cb),\n        /**\n         * Catches an unauthorized request (http code 401) and performs a callback.\n         */\n        unauthorized: cb => responseTypes.error(401, cb),\n        /**\n         * Catches a forbidden request (http code 403) and performs a callback.\n         */\n        forbidden: cb => responseTypes.error(403, cb),\n        /**\n         * Catches a \"not found\" request (http code 404) and performs a callback.\n         */\n        notFound: cb => responseTypes.error(404, cb),\n        /**\n         * Catches a timeout (http code 408) and performs a callback.\n         */\n        timeout: cb => responseTypes.error(408, cb),\n        /**\n         * Catches an internal server error (http code 500) and performs a callback.\n         */\n        internalError: cb => responseTypes.error(500, cb)\n    }\n\n    return responseTypes\n}\n","import { mix } from \"./mix\"\nimport conf from \"./config\"\nimport { resolver, WretcherError } from \"./resolver\"\n\n/**\n * The Wretcher class used to perform easy fetch requests.\n *\n * Immutability : almost every method of this class return a fresh Wretcher object.\n */\nexport class Wretcher {\n\n    protected constructor(\n        private _url: string,\n        private _options: RequestInit = {},\n        private _catchers: Map<number, (error: WretcherError) => void> = new Map()) {}\n\n    static factory(url = \"\", opts: RequestInit = {}) { return new Wretcher(url, opts) }\n    private selfFactory({ url = this._url, options = this._options, catchers = this._catchers } = {}) {\n        return new Wretcher(url, options, catchers)\n    }\n\n    /**\n     * Sets the default fetch options used for every subsequent fetch call.\n     * @param opts New default options\n     * @param mixin If true, mixes in instead of replacing the existing options\n     */\n    defaults(opts: RequestInit, mixin = false) {\n        conf.defaults = mixin ? conf.defaults = mix(conf.defaults, opts) : opts\n        return this\n    }\n\n    /**\n     * Sets the method (text, json ...) used to parse the data contained in the response body in case of an HTTP error.\n     *\n     * Persists for every subsequent requests.\n     *\n     * Default is \"text\".\n     */\n    errorType(method: \"text\" | \"json\") {\n        conf.errorType = method\n        return this\n    }\n\n    /**\n     * Returns a new Wretcher object with the url specified and the same options.\n     * @param url String url\n     */\n    url(url: string) {\n        return this.selfFactory({ url })\n    }\n\n    /**\n     * Returns a wretch factory which, when called, creates a new Wretcher object with the base url as an url prefix.\n     * @param baseurl The base url\n     */\n    baseUrl(baseurl: string) {\n        return (url = \"\", opts: RequestInit = {}) =>\n            this.selfFactory({ url: baseurl + url, options: mix(this._options, opts) })\n    }\n\n    /**\n     * Returns a new Wretcher object with the same url and new options.\n     * @param options New options\n     * @param mixin If true, mixes in instead of replacing the existing options\n     */\n    options(options: RequestInit, mixin = false) {\n        return this.selfFactory({ options: mixin ? mix(this._options, options) : options })\n    }\n\n    /**\n     * Converts a javascript object to query parameters,\n     * then appends this query string to the current url.\n     *\n     * ```\n     * let w = wretch(\"http://example.com\") // url is http://example.com\n     * w = w.query({ a: 1, b : 2 }) // url is now http://example.com?a=1&b=2\n     * ```\n     *\n     * @param qp An object which will be converted.\n     */\n    query(qp: object) {\n        return this.selfFactory({ url: appendQueryParams(this._url, qp) })\n    }\n\n    /**\n     * Set request headers.\n     * @param headerValues An object containing header keys and values\n     */\n    headers(headerValues: { [headerName: string]: any }) {\n        return this.selfFactory({ options: mix(this._options, { headers: headerValues }) })\n    }\n\n    /**\n     * Shortcut to set the \"Accept\" header.\n     * @param headerValue Header value\n     */\n    accept(headerValue: string) {\n        return this.headers({ Accept : headerValue })\n    }\n\n    /**\n     * Shortcut to set the \"Content-Type\" header.\n     * @param headerValue Header value\n     */\n    content(headerValue: string) {\n        return this.headers({ \"Content-Type\" : headerValue })\n    }\n\n    /**\n     * Adds a default catcher which will be called on every subsequent request error when the error code matches.\n     * @param code Error code\n     * @param catcher: The catcher method\n     */\n    catcher(code: number, catcher: (error: WretcherError) => void) {\n        const newMap = new Map(this._catchers)\n        newMap.set(code, catcher)\n        return this.selfFactory({ catchers: newMap })\n    }\n\n    /**\n     * Performs a get request.\n     */\n    get(opts = {}) {\n        return resolver(this._url)(this._catchers)(mix(opts, this._options))\n    }\n    /**\n     * Performs a delete request.\n     */\n    delete(opts = {}) {\n        return resolver(this._url)(this._catchers)({ ...mix(opts, this._options), method: \"DELETE\" })\n    }\n    /**\n     * Performs a put request.\n     */\n    put(opts = {}) {\n        return resolver(this._url)(this._catchers)({ ...mix(opts, this._options), method: \"PUT\" })\n    }\n    /**\n     * Performs a post request.\n     */\n    post(opts = {}) {\n        return resolver(this._url)(this._catchers)({ ...mix(opts, this._options), method: \"POST\" })\n    }\n    /**\n     * Performs a patch request.\n     */\n    patch(opts = {}) {\n        return resolver(this._url)(this._catchers)({ ...mix(opts, this._options), method: \"PATCH\" })\n    }\n\n    /**\n     * Sets the request body with any content.\n     * @param contents The body contents\n     */\n    body(contents: any) {\n        return this.selfFactory({ options: { ...this._options, body: contents }})\n    }\n    /**\n     * Sets the content type header, stringifies an object and sets the request body.\n     * @param jsObject An object which will be serialized into a JSON\n     */\n    json(jsObject: object) {\n        return this.content(\"application/json\").body(JSON.stringify(jsObject))\n    }\n    /**\n     * Converts the javascript object to a FormData and sets the request body.\n     * @param formObject An object which will be converted to a FormData\n     */\n    formData(formObject: object) {\n        const formData = new FormData()\n        for(const key in formObject) {\n            if(formObject[key] instanceof Array) {\n                for(const item of formObject[key])\n                    formData.append(key + \"[]\", item)\n            } else {\n                formData.append(key, formObject[key])\n            }\n        }\n\n        return this.body(formData)\n    }\n}\n\n// Internal helpers\n\nconst appendQueryParams = (url: string, qp: object) => {\n    const usp = new URLSearchParams()\n    const index = url.indexOf(\"?\")\n    for(const key in qp) {\n        if(qp[key] instanceof Array) {\n            for(const val of qp[key])\n                usp.append(key, val)\n        } else {\n            usp.append(key, qp[key])\n        }\n    }\n    return ~index ?\n        `${url.substring(0, index)}?${usp.toString()}` :\n        `${url}?${usp.toString()}`\n}\n","import { Wretcher } from \"./wretcher\"\n\n// URLSearchParams for node.js\ndeclare const global\ndeclare const require\nif(typeof self === \"undefined\") {\n    global.URLSearchParams = require(\"url\").URLSearchParams\n}\n\n/**\n * Return a fresh Wretcher instance.\n */\nexport default Wretcher.factory\n"],"names":["mix","one","two","mergeArrays","clone","prop","hasOwnProperty","Array","defaults","errorType","resolver","url","catchers","Map","opts","wrapper","fetch","conf","then","response","ok","_","err","Error","status","doCatch","promise","catch","has","get","wrapTypeParser","funName","cb","responseTypes","res","json","blob","formData","arrayBuffer","text","error","code","set","badRequest","unauthorized","forbidden","notFound","timeout","internalError","_url","_options","_catchers","this","Wretcher","_a","_b","_c","_d","options","_e","mixin","method","selfFactory","baseurl","_this","qp","appendQueryParams","headerValues","headers","headerValue","Accept","Content-Type","catcher","newMap","contents","body","jsObject","content","JSON","stringify","formObject","FormData","key","_i","item","append","usp","URLSearchParams","index","indexOf","val","substring","toString","self","global","require","factory"],"mappings":"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"}